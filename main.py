import psycopg2
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
from openpyxl.formatting.rule import ColorScaleRule
import os
from datetime import datetime, timedelta
import seaborn as sns

class AWSTickitAnalyzer:
    def __init__(self):
        self.connection = None
        self.connect()
        plt.style.use('seaborn-v0_8')
        self.colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD']
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(
                host="localhost",
                database="AWS_Tickit_Database",
                user="postgres",
                password="0000",
                port="5432"
            )
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö AWS Tickit")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    def execute_query(self, query, description=""):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞"""
        try:
            df = pd.read_sql_query(query, self.connection)
            if description:
                print(f"üìä {description}: {len(df)} —Å—Ç—Ä–æ–∫")
            return df
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    # 1. PIE CHART - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–±—ã—Ç–∏–π
    def create_pie_chart(self):
        """–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        query = """
        SELECT c.catgroup, ROUND(SUM(s.pricepaid) / 1000, 2) as revenue_k
        FROM sales s
        JOIN events e ON s.eventid = e.eventid
        JOIN category c ON e.catid = c.catid
        GROUP BY c.catgroup
        ORDER BY revenue_k DESC;
        """
        
        df = self.execute_query(query, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        if df is not None and len(df) > 0:
            plt.figure(figsize=(10, 8))
            plt.pie(df['revenue_k'], labels=df['catgroup'], autopct='%1.1f%%', 
                   colors=self.colors, startangle=90)
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–±—ã—Ç–∏–π (–≤ —Ç—ã—Å. $)', fontsize=14, fontweight='bold')
            plt.tight_layout()
            os.makedirs('charts', exist_ok=True)
            plt.savefig('charts/pie_chart_revenue_by_category.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: charts/pie_chart_revenue_by_category.png")

    # 2. BAR CHART - –¢–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    def create_bar_chart(self):
        """–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: —Ç–æ–ø –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        query = """
        SELECT city, state, COUNT(*) as user_count
        FROM users 
        GROUP BY city, state 
        HAVING COUNT(*) > 50
        ORDER BY user_count DESC
        LIMIT 10;
        """
        
        df = self.execute_query(query, "–¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        if df is not None and len(df) > 0:
            plt.figure(figsize=(12, 6))
            bars = plt.bar(range(len(df)), df['user_count'], color=self.colors[0])
            plt.title('–¢–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', fontsize=14, fontweight='bold')
            plt.xlabel('–ì–æ—Ä–æ–¥–∞')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            plt.xticks(range(len(df)), [f"{row['city']}, {row['state']}" for _, row in df.iterrows()], rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, count in zip(bars, df['user_count']):
                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5, 
                        int(count), ha='center', va='bottom')
            
            plt.tight_layout()
            plt.savefig('charts/bar_chart_top_cities.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: charts/bar_chart_top_cities.png")

    # 3. HORIZONTAL BAR CHART - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —à—Ç–∞—Ç–∞–º
    def create_horizontal_bar_chart(self):
        """–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —à—Ç–∞—Ç–∞–º"""
        query = """
        SELECT u.state, 
               AVG(s.pricepaid) as avg_transaction,
               COUNT(s.saleid) as total_sales
        FROM users u
        JOIN sales s ON u.userid = s.buyerid
        GROUP BY u.state
        HAVING COUNT(s.saleid) > 100
        ORDER BY avg_transaction DESC
        LIMIT 15;
        """
        
        df = self.execute_query(query, "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —à—Ç–∞—Ç–∞–º")
        if df is not None and len(df) > 0:
            plt.figure(figsize=(12, 8))
            bars = plt.barh(range(len(df)), df['avg_transaction'], color=self.colors[1])
            plt.title('–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —à—Ç–∞—Ç–∞–º ($)', fontsize=14, fontweight='bold')
            plt.xlabel('–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ($)')
            plt.ylabel('–®—Ç–∞—Ç—ã')
            plt.yticks(range(len(df)), df['state'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            for i, (bar, value) in enumerate(zip(bars, df['avg_transaction'])):
                plt.text(bar.get_width() + 1, bar.get_y() + bar.get_height()/2, 
                        f'${value:.2f}', va='center')
            
            plt.tight_layout()
            plt.savefig('charts/horizontal_bar_avg_transaction.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: charts/horizontal_bar_avg_transaction.png")

    # 4. LINE CHART - –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º
    def create_line_chart(self):
        """–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: –¥–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º"""
        query = """
        SELECT 
            EXTRACT(YEAR FROM s.saletime) as year,
            EXTRACT(MONTH FROM s.saletime) as month,
            COUNT(s.saleid) as total_sales,
            SUM(s.pricepaid) as total_revenue
        FROM sales s
        JOIN events e ON s.eventid = e.eventid
        JOIN venue v ON e.venueid = v.venueid
        GROUP BY year, month
        ORDER BY year, month;
        """
        
        df = self.execute_query(query, "–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º")
        if df is not None and len(df) > 0:
            df['date'] = pd.to_datetime(df['year'].astype(int).astype(str) + '-' + df['month'].astype(int).astype(str) + '-01')
            
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
            ax1.plot(df['date'], df['total_sales'], marker='o', linewidth=2, color=self.colors[2])
            ax1.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂')
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
            ax2.plot(df['date'], df['total_revenue'], marker='s', linewidth=2, color=self.colors[3])
            ax2.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º', fontsize=14, fontweight='bold')
            ax2.set_ylabel('–í—ã—Ä—É—á–∫–∞ ($)')
            ax2.set_xlabel('–ú–µ—Å—è—Ü')
            ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig('charts/line_chart_sales_trends.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: charts/line_chart_sales_trends.png")

    # 5. HISTOGRAM - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã
    def create_histogram(self):
        """–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã"""
        query = """
        SELECT l.priceperticket
        FROM listing l
        JOIN events e ON l.eventid = e.eventid
        JOIN category c ON e.catid = c.catid
        WHERE l.priceperticket BETWEEN 1 AND 500;
        """
        
        df = self.execute_query(query, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã")
        if df is not None and len(df) > 0:
            plt.figure(figsize=(12, 6))
            plt.hist(df['priceperticket'], bins=30, color=self.colors[4], alpha=0.7, edgecolor='black')
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã', fontsize=14, fontweight='bold')
            plt.xlabel('–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ ($)')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤')
            plt.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig('charts/histogram_ticket_prices.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: charts/histogram_ticket_prices.png")

    # 6. SCATTER PLOT - –°–≤—è–∑—å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –±–∏–ª–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
    def create_scatter_plot(self):
        """–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: —Ü–µ–Ω–∞ vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤"""
        query = """
        SELECT 
            AVG(l.priceperticket) as avg_ticket_price,
            SUM(s.qtysold) as total_tickets_sold,
            c.catname
        FROM sales s
        JOIN listing l ON s.listid = l.listid
        JOIN events e ON s.eventid = e.eventid
        JOIN category c ON e.catid = c.catid
        GROUP BY c.catname
        HAVING SUM(s.qtysold) > 100;
        """
        
        df = self.execute_query(query, "–¶–µ–Ω–∞ vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤")
        if df is not None and len(df) > 0:
            plt.figure(figsize=(12, 8))
            scatter = plt.scatter(df['avg_ticket_price'], df['total_tickets_sold'], 
                                c=df['avg_ticket_price'], cmap='viridis', s=100, alpha=0.6)
            
            plt.colorbar(scatter, label='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ ($)')
            plt.title('–°–≤—è–∑—å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –±–∏–ª–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤', fontsize=14, fontweight='bold')
            plt.xlabel('–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ ($)')
            plt.ylabel('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤')
            plt.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for i, row in df.iterrows():
                plt.annotate(row['catname'], 
                           (row['avg_ticket_price'], row['total_tickets_sold']),
                           xytext=(5, 5), textcoords='offset points', fontsize=8)
            
            plt.tight_layout()
            plt.savefig('charts/scatter_price_vs_quantity.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: charts/scatter_price_vs_quantity.png")

    # 7. INTERACTIVE PLOTLY CHART WITH SLIDER
    def create_interactive_slider_chart(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–∞–π–¥–µ—Ä–æ–º"""
        query = """
        SELECT 
            DATE(s.saletime) as sale_date,
            c.catgroup,
            AVG(s.pricepaid) as avg_price,
            COUNT(s.saleid) as daily_sales,
            SUM(s.qtysold) as daily_tickets
        FROM sales s
        JOIN events e ON s.eventid = e.eventid
        JOIN category c ON e.catid = c.catid
        WHERE s.saletime >= '2008-01-01'
        GROUP BY sale_date, c.catgroup
        ORDER BY sale_date;
        """
        
        df = self.execute_query(query, "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
        if df is not None and len(df) > 0:
            df['sale_date'] = pd.to_datetime(df['sale_date'])
            df['month_year'] = df['sale_date'].dt.to_period('M').astype(str)
            
            fig = px.scatter(df, 
                           x="daily_sales", 
                           y="avg_price",
                           size="daily_tickets",
                           color="catgroup",
                           animation_frame="month_year",
                           hover_name="catgroup",
                           title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                           labels={"daily_sales": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", 
                                 "avg_price": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ ($)"})
            
            fig.show()
            print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–∞–π–¥–µ—Ä–æ–º")

    # 8. EXPORT TO EXCEL WITH FORMATTING
    def export_to_excel(self, dataframes_dict, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            os.makedirs('exports', exist_ok=True)
            filepath = f'exports/{filename}'
            
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                for sheet_name, df in dataframes_dict.items():
                    df.to_excel(writer, sheet_name=sheet_name, index=False)
                    
                    # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    workbook = writer.book
                    worksheet = writer.sheets[sheet_name]
                    
                    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                    worksheet.freeze_panes = "A2"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    worksheet.auto_filter.ref = worksheet.dimensions
                    
                    # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    numeric_columns = df.select_dtypes(include=['number']).columns
                    for col_idx, col_name in enumerate(numeric_columns, 1):
                        col_letter = chr(64 + col_idx)  # A, B, C, ...
                        range_str = f"{col_letter}2:{col_letter}{len(df)+1}"
                        
                        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
                        rule = ColorScaleRule(
                            start_type="min", start_color="FFAA0000",
                            mid_type="percentile", mid_value=50, mid_color="FFFFFF00",
                            end_type="max", end_color="FF00AA00"
                        )
                        worksheet.conditional_formatting.add(range_str, rule)
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_sheets = len(dataframes_dict)
            total_rows = sum(len(df) for df in dataframes_dict.values())
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {filename}, {total_sheets} –ª–∏—Å—Ç–æ–≤, {total_rows} —Å—Ç—Ä–æ–∫")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
            return False

    def prepare_data_for_excel_export(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel"""
        queries = {
            "Sales_Summary": """
                SELECT c.catgroup, c.catname,
                       COUNT(s.saleid) as total_sales,
                       SUM(s.qtysold) as total_tickets,
                       SUM(s.pricepaid) as total_revenue,
                       AVG(s.pricepaid) as avg_sale_amount
                FROM sales s
                JOIN events e ON s.eventid = e.eventid
                JOIN category c ON e.catid = c.catid
                GROUP BY c.catgroup, c.catname
                ORDER BY total_revenue DESC;
            """,
            "User_Geography": """
                SELECT city, state,
                       COUNT(*) as user_count,
                       COUNT(DISTINCT CASE WHEN likesports THEN userid END) as sports_fans,
                       COUNT(DISTINCT CASE WHEN likeconcerts THEN userid END) as concert_fans
                FROM users
                GROUP BY city, state
                HAVING COUNT(*) > 10
                ORDER BY user_count DESC;
            """,
            "Venue_Performance": """
                SELECT v.venuename, v.venuecity, v.venuestate,
                       COUNT(DISTINCT e.eventid) as total_events,
                       SUM(s.pricepaid) as total_revenue,
                       AVG(s.pricepaid) as avg_revenue_per_event
                FROM venue v
                JOIN events e ON v.venueid = e.venueid
                JOIN sales s ON e.eventid = s.eventid
                GROUP BY v.venueid, v.venuename, v.venuecity, v.venuestate
                ORDER BY total_revenue DESC;
            """
        }
        
        dataframes = {}
        for sheet_name, query in queries.items():
            df = self.execute_query(query, f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {sheet_name}")
            if df is not None:
                dataframes[sheet_name] = df
        
        return dataframes

    def demonstrate_live_data_update(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        query_before = """
        SELECT c.catgroup, SUM(s.pricepaid) as revenue
        FROM sales s
        JOIN events e ON s.eventid = e.eventid
        JOIN category c ON e.catid = c.catid
        GROUP BY c.catgroup
        ORDER BY revenue DESC;
        """
        
        df_before = self.execute_query(query_before, "–î–∞–Ω–Ω—ã–µ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if df_before is not None:
            plt.figure(figsize=(10, 6))
            plt.bar(df_before['catgroup'], df_before['revenue'], color='lightblue')
            plt.title('–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)', fontweight='bold')
            plt.ylabel('–í—ã—Ä—É—á–∫–∞ ($)')
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.savefig('charts/before_update.png', dpi=300, bbox_inches='tight')
            plt.show()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —ç—Ç–æ –±—ã–ª–∞ –±—ã –≤—Å—Ç–∞–≤–∫–∞ –≤ –ë–î)
        print("üì• –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å)
        df_after = self.execute_query(query_before, "–î–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if df_after is not None:
            plt.figure(figsize=(10, 6))
            plt.bar(df_after['catgroup'], df_after['revenue'], color='lightgreen')
            plt.title('–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)', fontweight='bold')
            plt.ylabel('–í—ã—Ä—É—á–∫–∞ ($)')
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.savefig('charts/after_update.png', dpi=300, bbox_inches='tight')
            plt.show()
            
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É charts/ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

    def run_complete_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê AWS TICKIT")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        self.create_pie_chart()
        self.create_bar_chart()
        self.create_horizontal_bar_chart()
        self.create_line_chart()
        self.create_histogram()
        self.create_scatter_plot()
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        self.create_interactive_slider_chart()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        excel_data = self.prepare_data_for_excel_export()
        self.export_to_excel(excel_data, "aws_tickit_analysis.xlsx")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.demonstrate_live_data_update()
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö: charts/, exports/")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection:
            self.connection.close()
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    analyzer = None
    try:
        analyzer = AWSTickitAnalyzer()
        analyzer.run_complete_analysis()
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        if analyzer:
            analyzer.close()

if __name__ == "__main__":
    main()